version: '3.3'

services:
  fluentd:
    container_name: fluentd
    build:
      context: ./
      dockerfile: ./dockerfiles/fluentd.Dockerfile
    ports:
      - 8888:8888
      - 8888:8888/udp
    volumes:
      # - certs:/fluentd/certs
      - ./fluentd/log:/fluentd/log
    depends_on:
      kibana:
        condition: service_healthy
      # - elasticsearch

  elasticsearch-setup:
    container_name: elasticsearch-setup
    user: root
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
    # volumes:
    #   - certs:/usr/share/elasticsearch/config/certs
    #   command: >
    #     bash -c '
    #       mkdir -p config/certs;
    #       if [ ! -f config/certs/ca.zip ]; then
    #         echo "Creating CA";
    #         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
    #         unzip config/certs/ca.zip -d config/certs;
    #       fi;
    #       if [ ! -f config/certs/certs.zip ]; then
    #         echo "Creating certs";
    #         echo -ne \
    #         "instances:\n"\
    #         "  - name: elasticsearch\n"\
    #         "    dns:\n"\
    #         "      - elasticsearch\n"\
    #         "      - localhost\n"\
    #         "    ip:\n"\
    #         "      - 127.0.0.1\n"\
    #         > config/certs/instances.yml;
    #         bin/elasticsearch-certutil cert --silent --pem \
    #           -out config/certs/certs.zip \
    #           --in config/certs/instances.yml \
    #           --ca-cert config/certs/ca/ca.crt \
    #           --ca-key config/certs/ca/ca.key;
    #         unzip config/certs/certs.zip -d config/certs;
    #       fi;
    #       echo "Setting file permissions";
    #       chown -R root:root config/certs;
    #       find . -type d -exec chmod 750 \{\} \;;
    #       find . -type f -exec chmod 640 \{\} \;;
    #       echo "Waiting for Elasticsearch availability";
    #       until curl -s --cacert config/certs/ca/ca.crt \
    #         https://elasticsearch:9200 | \
    #         grep -q "missing authentication credentials"; \
    #         do sleep 30; \
    #       done;
    #       echo "Setting kibana_system password";
    #       until curl -s -X POST --cacert config/certs/ca/ca.crt \
    #         -u "elastic:${ELASTIC_PASSWORD}" \
    #         -H "Content-Type: application/json" \
    #         https://elasticsearch:9200/_security/user/kibana_system/_password \
    #         -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | \
    #         grep -q "{}"; \
    #         do sleep 10; \
    #       done;
    #       echo "All done!";
    #     '
    command: >
      bash -c '
        echo "Setting kibana_system password";
        until curl -s -X POST \
          -u "elastic:${ELASTIC_PASSWORD}" \
          -H "Content-Type: application/json" \
          http://elasticsearch:9200/_security/user/kibana_system/_password \
          -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | \
          grep -q "{}"; \
          do sleep 10; \
        done;
        echo "All done!";
      '

  elasticsearch:
    container_name: elasticsearch
    # user: root
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
    volumes:
      # - certs:/usr/share/elasticsearch/config/certs
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    expose:
      - 9200
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      # - 'ES_JAVA_OPTS="-Xms512m -Xmx512m"'
      - discovery.type=single-node
      # - network.host=0.0.0.0
      - node.name=elasticsearch
      # - xpack.security.enrollment.enabled=true
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=false
      # - xpack.security.enabled=true
      # - xpack.security.http.ssl.enabled=true
      # - xpack.security.transport.ssl.enabled=true
      # - xpack.security.transport.ssl.verification_mode=certificate
      # - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      # - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      # - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      # - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      # - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
    # depends_on:
    #   elasticsearch-setup:
    #     condition: service_healthy
    ulimits:
      memlock:
        soft: -1
        hard: -1
      # healthcheck:
      #   test:
      #     [
      #       'CMD-SHELL',
      #       "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
      #     ]
      #   interval: 10s
      #   timeout: 10s
      #   retries: 120
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -s -u 'elastic:${ELASTIC_PASSWORD}' -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.8.2
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      # - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      # - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - server.host=0.0.0.0
      - xpack.security.enabled=false
    volumes:
      # - certs:/usr/share/kibana/config/certs
      - kibana:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

volumes:
  # certs:
  #   driver: local
  elasticsearch:
    driver: local
  kibana:
    driver: local
